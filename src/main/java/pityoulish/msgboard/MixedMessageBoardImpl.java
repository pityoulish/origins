/*
 * This work is released into the Public Domain under the
 * terms of the Creative Commons CC0 1.0 Universal license.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */
package pityoulish.msgboard;

import java.util.NavigableMap;
import java.util.TreeMap;


/**
 * An implementation of {@link MixedMessageBoard}.
 * This implementation is intended for dozens of messages.
 * To handle thousands of messages, you'd probably use other data structures.
 */
public class MixedMessageBoardImpl implements MixedMessageBoard
{
  /** The message types distinguished by this board. */
  public enum MT { USER, SYSTEM };

  /**
   * Helper class to eliminate type parameters from the message implementation.
   * Don't know how else to get rid of "unchecked conversion" warnings.
   * But it makes the code more readable anyway, by eliminating nested
   * type parameters from the collection.
   */
  public static class MTMsg extends TypedMessageImpl<MT>
  {
    public MTMsg(String originator, String timestamp, String text, MT msgtype)
    {
      super(originator, timestamp, text, msgtype);
    }
  }


  /** The number of messages that fit on this board. */
  protected int boardCapacity;

  /** The sequencer for generating message IDs. */
  protected final Sequencer boardSequencer;

  /** The timestamp generator. */
  protected Timestamper boardTimer;

  /**
   * The ordered map of messages on this board.
   * Keys are the message IDs generated by the {@link #boardSequencer}.
   * Values are the actual messages.
   */
  protected NavigableMap<String,MTMsg> boardMessages;

  /** ID of the last dropped user message. */
  protected String lastDroppedUserMessageID;


  /**
   * Creates a new message board.
   *
   * @param capacity    the number of messages that fit on the new board
   */
  public MixedMessageBoardImpl(int capacity)
  {
    if (capacity < 1)
       throw new IllegalArgumentException("capacity " + capacity);

    boardCapacity  = capacity;
    boardSequencer = newSequencer();
    boardTimer     = newTimestamper();
    boardMessages  = new TreeMap<>(boardSequencer.getComparator());
    lastDroppedUserMessageID = boardSequencer.createMessageID(); // dummy ID
  }


  /**
   * Creates the sequencer for this board.
   * Called by the constructor.
   * Override this method to use a different sequencer implementation.
   */
  protected Sequencer newSequencer()
  {
    return new TrivialSequencerImpl();
  }


  /**
   * Creates the timestamp generator for this board.
   * Called by the constructor.
   * Override this method to use a different timestamp format.
   */
  protected Timestamper newTimestamper()
  {
    return new TimestamperImpl();
  }



  // non-javadoc, see interface MessageBoard
  public MessageBatch listMessages(int limit, String marker)
  {
    if (limit < boardMessages.size())
       throw new UnsupportedOperationException("@@@ limit not yet supported");
    if (marker != null)
       throw new UnsupportedOperationException("@@@ marker not yet supported");

    throw new UnsupportedOperationException("@@@ not yet implemented");
  }


  // non-javadoc, see interface UserMessageBoard
  public Message putMessage(String originator, String text)
  {
    MTMsg msg = new
      MTMsg(originator, boardTimer.getTimestamp(), text, MT.USER);

    addMessageToBoard(msg);

    return msg;
  }


  // non-javadoc, see interface SystemMessageBoard
  public Message putSystemMessage(String slot, String text)
  {
    String originator = "_";
    if (slot != null)
     {
       originator = "_#"+slot;
       //@@@ if there is a message for the slot, remove it now
       throw new UnsupportedOperationException("@@@ slot not yet supported");
     }

    MTMsg msg = new
      MTMsg(originator, boardTimer.getTimestamp(), text, MT.SYSTEM);

    addMessageToBoard(msg);

    return msg;
  }


  // non-javadoc, see interface SystemMessageBoard
  public boolean removeSystemMessage(String slot)
  {
    throw new UnsupportedOperationException("@@@ not yet implemented");
  }


  /**
   * Adds a message to the board.
   * This might drop an old message. All book-keeping is taken care of here.
   *
   * @param msg   the message to add
   *
   * @return      ID of the added message
   */
  protected String addMessageToBoard(MTMsg msg)
  {
    if (msg == null)
       throw new NullPointerException("TypedMessage");

    String key = boardSequencer.createMessageID();
    boardMessages.put(key, msg);

    if (boardMessages.size() > boardCapacity)
     {
       //@@@ drop message(s), update lastDroppedUserMessage
       throw new UnsupportedOperationException("@@@ capacity not yet supported");
     }

    return key;
  }


}

