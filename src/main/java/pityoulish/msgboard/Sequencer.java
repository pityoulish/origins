/*
 * This work is released into the Public Domain under the
 * terms of the Creative Commons CC0 1.0 Universal license.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */
package pityoulish.msgboard;


/**
 * A generator for sequential message identifiers.
 * Such identifiers can be used as {@link MessageBatch#getMarker marker},
 * to represent a position in the message stream.
 * This interface isn't relevant for callers of {@link MessageBoard}.
 * Instead, it encapsulates logic for implementing a board in a specific way.
 *
 * <p><i>description of requirements missing here</i></p>
 */
public interface Sequencer
{
  /**
   * Generates an identifier for a user message.
   * See {@link UserMessageBoard} for details on user messages.
   *
   * @return a new user message ID
   */
  public String createUserMessageID()
    ;


  /**
   * Generates an identifier for a system message.
   * See {@link SystemMessageBoard} for details on system messages.
   *
   * @return a new system message ID
   */
  public String createSystemMessageID()
    ;


  /**
   * Performs a sanity check on a message identifier.
   * A string is sane if it looks like a message ID that can be generated here.
   * Passing the check implies that the argument is fit for use
   * with {@link #isDiscontinuous}.
   *
   * @param candidate   the message identifier to check
   *
   * @return    <code>true</code> if the argument might have been
   *            generated by this sequencer, or
   *            <code>false</code> if the argument was definitely
   *            not generated here
   */
  public boolean isSane(String candidate)
    ;


  /**
   * Checks whether a user message would fit between two identifiers.
   * If consecutive or identical user message IDs are passed as arguments,
   * the result is <code>false</code>. For non-consecutive user message IDs,
   * the result is <code>true</code>. If system message IDs are passed,
   * the method has to deduce nearby user message IDs to make the decision.
   *
   * @param older   the ID of a message, the older one
   * @param newer   the ID of another message, the newer one
   *
   * @return    <code>true</code> if this sequencer could generate a
   *            user message ID that fits between the two arguments,
   *            <code>false</code> otherwise
   *
   * @throws IllegalArgumentException
   *    if an argument is not {@link #isSane sane},
   *    or if the older one is actually newer
   */
  public boolean isDiscontinuous(String older, String newer)
    throws IllegalArgumentException
    ;

}
