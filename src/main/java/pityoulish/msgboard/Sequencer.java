/*
 * This work is released into the Public Domain under the
 * terms of the Creative Commons CC0 1.0 Universal license.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */
package pityoulish.msgboard;

import java.util.Comparator;


/**
 * A generator for sequential message identifiers.
 * Such identifiers can be used as {@link MessageBatch#getMarker marker},
 * to represent a position in the message stream.
 * This interface isn't relevant for callers of {@link MessageBoard}.
 * Instead, it encapsulates logic for implementing boards in a specific way.
 *
 * <p>
 * For thousands of messages, the generated identifiers MUST satisfy
 * the following requirements:
 * </p>
 * <ul>
 * <li>IDs must be unique.</li>
 * <li>IDs must be URL-safe and safe for typing in command lines.</li>
 * <li>IDs must be reasonably short to be typed by a human.
 *     12 characters are fine, 80 are too long.</li>
 * <li>The comparator returned by {@link #getComparator}
 *     imposes a chronological ordering on the generated IDs.</li>
 * </ul>
 *
 * <p>
 * In addition, the generated identifiers SHOULD satisfy
 * the following requirements:
 * </p>
 * <ul>
 * <li>IDs should be hard to guess or manipulate by humans.
 *     {@link #isSane isSane} should detect such attempts.
 *     However, cryptographic safety is not expected.
 * </li>
 * <li>IDs from other instances of the sequencer should be
 *     rejected by {@link #isSane isSane}.</li>
 * </ul>
 *
 * <p>
 * For millions of messages, some of the requirements may be violated.
 * Preferably, the generated IDs get longer, but satisfy all other
 * requirements. However, wrapping around and re-using IDs
 * after millions of messages is also acceptable, provided that
 * the {@link #getComparator comparator} can deal with that.
 * </p>
 *
 * <p><b>Rationale:</b>
 * <ul>
 * <li>The restriction to thousands of messages allows for short IDs.
 *     The {@link MessageBoard} is not meant to handle Twitter volumes.
 * </li>
 * <li>Short and safe IDs improve the usability of command-line programs
 *     in the programming exercises. Students may have to type in a marker
 *     that was returned by a previous call.
 * </li>
 * <li>{@link #isSane isSane} should detect typos, tinkering,
 *     and markers from different message boards.
 *     Some students are bound to try.
 * </li>
 * <li>Using the {@link #getComparator comparator}, IDs can serve as
 *     a discrete, unique timestamp. Message boards can sort by IDs,
 *     and compare them to detect discontinuity.
 *     The downside is that this complects an ordering with the identity.
 *     <br>
 *     Twitter would never use a message ID for chronological sorting.
 *     They store meta data like timestamps along with the messages.
 *     But they don't drop messages, like a {@link MessageBoard} does.
 * </li>
 * </ul>
 * <p>
 * If the timestamps of a {@link MessageBoard} were unique, other message IDs
 * would not be required. You might be tempted to actually use timestamps,
 * and distinguish messages within the same second by fake milliseconds.
 * But that would complect uniqueness into timestamps, and therefore is
 * no better than the message IDs. Besides, timestamps are easy to tinker with.
 * </p>
 * <p>
 * More on complecting, and why you shouldn't do it,
 * in Rich Hickey's excellent talk
 * <a href="http://www.infoq.com/presentations/Simple-Made-Easy"
 *    style="font-size: larger; font-weight: bold;"
 *   >Simple Made Easy</a>.
 * </p>
 */
public interface Sequencer
{
  /**
   * Generates a message identifier.
   *
   * @return a new message ID
   */
  public String createMessageID()
    ;


  /**
   * Performs a sanity check on a message identifier.
   * A candidate string is sane if it looks like a message ID
   * that was or might be generated here.
   * Passing the check implies that the argument is fit for use
   * with the {@link #getComparator comparator} of this sequencer.
   *
   * @param candidate   the message identifier to check
   *
   * @return    <code>true</code> if the argument might have been
   *            generated by this sequencer, or
   *            <code>false</code> if the argument was definitely
   *            not generated here
   */
  public boolean isSane(String candidate)
    ;


  /**
   * Obtains a comparator for IDs generated here.
   * The returned comparator must only be used to compare IDs that are
   * {@link #isSane sane}. For other strings, it may throw an exception
   * or yield unpredictable results.
   *
   * @return a comparator that imposes a chronological ordering on
   *         identifiers generated by this sequencer
   */
  public Comparator<String> getComparator()
    ;
}
