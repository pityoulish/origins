/*
 * This work is released into the Public Domain under the
 * terms of the Creative Commons CC0 1.0 Universal license.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */
package pityoulish.msgboard;


/**
 * A generator for sequential message identifiers.
 * Such identifiers can be used as {@link MessageBatch#getMarker marker},
 * to represent a position in the message stream.
 * This interface isn't relevant for callers of {@link MessageBoard}.
 * Instead, it encapsulates logic for implementing boards in a specific way.
 *
 * <p>
 * For thousands of messages, and at least four system messages between
 * two subsequent user messages, the generated identifiers MUST satisfy
 * the following requirements:
 * </p>
 * <ul>
 * <li>IDs must be unique.</li>
 * <li>IDs must be generated in ascending alphabetical order.</li>
 * <li>IDs must be URL-safe and safe for typing in command lines.</li>
 * <li>IDs must be reasonably short to be typed by a human.
 *     12 characters are fine, 80 are too long.</li>
 * <li>{@link #isDiscontinuous isDiscontinuous} yields no false positives.</li>
 * </ul>
 *
 * <p>
 * In addition, the generated identifiers SHOULD satisfy
 * the following requirements:
 * </p>
 * <ul>
 * <li>IDs should be hard to guess or manipulate by humans.
 *     {@link #isSane isSane} should detect such attempts.
 *     However, cryptographic safety is not expected.
 * </li>
 * <li>IDs from other instances of the sequencer should be
 *     rejected by {@link #isSane isSane}.</li>
 * </ul>
 *
 * <p>
 * For millions of messages, or more than four system messages between
 * two subsequent user messages, some or all of the requirements
 * may be violated. In consequence, some misbehavior of message boards
 * using the sequencer is expected.
 * </p>
 *
 * <p><b>Rationale:</b>
 * <ul>
 * <li>The restriction to thousands of messages allows for short IDs.
 *     The {@link MessageBoard} is not meant to handle Twitter volumes.
 * </li>
 * <li>The restriction on the number of system messages between user messages
 *     allows for a short, fixed-width extension of user message IDs to
 *     identify system messages.
 * </li>
 * <li>Short and safe IDs improve the usability of command-line programs
 *     in the programming exercises. Students may have to type in a marker
 *     that was returned by a previous call.
 * </li>
 * <li>{@link #isSane isSane} should detect typos, tinkering,
 *     and markers from different message boards.
 *     Some students are bound to try.
 * </li>
 * <li>The alphabetical order allows for message boards to
 *     use string comparison when searching for message IDs
 *     in a sorted data structure.
 *     This complects meta data into the ID for convenience.
 *     More on complecting, and why you shouldn't do it,
 *     in Rich Hickey's excellent talk
 *     <a href="http://www.infoq.com/presentations/Simple-Made-Easy"
 *     >Simple Made Easy</a>.
 *     <br/>
 *     Twitter would never use a message ID for chronological sorting.
 *     They store meta data like timestamps along with the messages.
 *     But they don't drop messages, like a {@link MessageBoard} does.
 * </li>
 * </ul>
 */
public interface Sequencer
{
  /**
   * Generates an identifier for a user message.
   * See {@link UserMessageBoard} for details on user messages.
   *
   * @return a new user message ID
   */
  public String createUserMessageID()
    ;


  /**
   * Generates an identifier for a system message.
   * See {@link SystemMessageBoard} for details on system messages.
   *
   * @return a new system message ID
   */
  public String createSystemMessageID()
    ;


  /**
   * Performs a sanity check on a message identifier.
   * A string is sane if it looks like a message ID that can be generated here.
   * Passing the check implies that the argument is fit for use
   * with {@link #isDiscontinuous}.
   *
   * @param candidate   the message identifier to check
   *
   * @return    <code>true</code> if the argument might have been
   *            generated by this sequencer, or
   *            <code>false</code> if the argument was definitely
   *            not generated here
   */
  public boolean isSane(String candidate)
    ;


  /**
   * Checks whether a user message would fit between two identifiers.
   * If consecutive or identical user message IDs are passed as arguments,
   * the result is <code>false</code>. For non-consecutive user message IDs,
   * the result is <code>true</code>. If system message IDs are passed,
   * the method has to deduce nearby user message IDs to make the decision.
   *
   * @param older   the ID of a message, the older one
   * @param newer   the ID of another message, the newer one
   *
   * @return    <code>true</code> if this sequencer could generate a
   *            user message ID that fits between the two arguments,
   *            <code>false</code> otherwise
   *
   * @throws IllegalArgumentException
   *    if an argument is not {@link #isSane sane},
   *    or if the older one is actually newer
   */
  public boolean isDiscontinuous(String older, String newer)
    throws IllegalArgumentException
    ;

}
