/*
 * This work is released into the Public Domain under the
 * terms of the Creative Commons CC0 1.0 Universal license.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */
package pityoulish.msgboard;

import java.util.Comparator;


/**
 * A trivial implementation of {@link Sequencer}.
 * This implementation satisfies all of the MUST requirements,
 * and none of the SHOULD requirements.
 * The messages are simply numbered.
 */
public class TrivialSequencer implements Sequencer
{
  /** The counter for messages. */
  protected int counter;


  // public default constructor


  // non-javadoc, see interface
  public String createMessageID()
  {
    counter++;

    return String.valueOf(counter);
  }


  // non-javadoc, see interface
  public boolean isSane(String candidate)
  {
    boolean sane = false;

    // The message IDs are positive integers, without leading zeroes.
    if ((candidate != null) && (candidate.length() > 0) &&
        (candidate.charAt(0) != '0'))
     {
       try {
         int num = Integer.valueOf(candidate);
         sane = (num > 0);

       } catch (NumberFormatException nfx) {
         // proceed, sane remains false
       }
     }

    return sane;
  }


  // non-javadoc, see interface
  public Comparator<String> getComparator()
  {
    return TrivComp.INSTANCE;
  }


  /** A comparator for the IDs generated by {@link TrivialSequencer}. */
  public static class TrivComp implements Comparator<String>
  {
    /**
     * The singleton instance of this comparator.
     * The implementation is thread-safe, there is no need to create another.
     */
    public final static TrivComp INSTANCE = new TrivComp();

    /** Restricted default constructor. */
    private TrivComp()
    {
      // no body
    }


    // non-javadoc, see interface
    public int compare(String o1, String o2)
    {
      if (o1 == null)
         throw new NullPointerException("o1");
      if (o2 == null)
         throw new NullPointerException("o2");

      // If the arguments are not message IDs generated here, the result
      // does not matter. If they are, the longer string (more digits)
      // sorts after the shorter one. For strings with same length,
      // the alphabetical order corresponds to the numerical order.
      int result = o1.length() - o2.length();
      if (result == 0)
         result = o1.compareTo(o2);

      return result;
    }

  } // class TrivComp

}

